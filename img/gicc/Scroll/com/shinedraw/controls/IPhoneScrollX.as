/****************************************************************************This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>.-- A iPhone Scroll in AS3-- Copyright 2009 Terence Tsang-- admin@shinedraw.com-- http://www.shinedraw.com-- Your Flash vs Silverlight Repository****************************************************************************/package com.shinedraw.controls {	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Point;	import flash.system.ApplicationDomain;	import flash.display.MovieClip;	public class IPhoneScroll extends MovieClip {        // Constant variables        private static var DECAY:Number = 0.93;        private static var MOUSE_DOWN_DECAY:Number = 0.5;        private static var SPEED_SPRINGNESS:Number = 0.4;        private static var BOUNCING_SPRINGESS:Number = 0.08;		// variables        private var _mouseDown:Boolean = false;        private var _velocity:Number = 0;        private var _mouseDownX:Number = 0;        private var _mouseDownPoint:Point = new Point();        private var _lastMouseDownPoint:Point = new Point();        		        // elements        private var _canvasWidth:Number = 0;		private var _myCanvas:MovieClip;		private var _myScrollElement:MovieClip;				public function IPhoneScroll() {			_myCanvas = getChildByName("myCanvas") as MovieClip;			_myCanvas.buttonMode = true;			_canvasWidth = _myCanvas.width;						var MyClass:Class = ApplicationDomain.currentDomain.getDefinition("MyScrollElement") as Class;			_myScrollElement = new MyClass();			_myCanvas.addChild(_myScrollElement);						// add handlers			_myCanvas.addEventListener(MouseEvent.MOUSE_DOWN, on_mouse_down);			addEventListener(Event.ENTER_FRAME, on_enter_frame);			trace("test");			_myScrollElement.x = 100;		}				private function on_enter_frame(e:Event):void{            // decay the velocity            if(_mouseDown) _velocity *= MOUSE_DOWN_DECAY;            else _velocity *= DECAY;            // if not mouse down, then move the element with the velocity            if (!_mouseDown)            {                var textWidth:Number = _myScrollElement.Width;                var x:Number = _myScrollElement.x;                var bouncing:Number = 0;                // calculate a bouncing when the text moves over the canvas size                if (x > 0)                {                    bouncing = -x * BOUNCING_SPRINGESS;                }else if( y + textWidth < _canvasWidth){                    bouncing = (_canvasWidth - textWidth - x) * BOUNCING_SPRINGESS;                }                _myScrollElement.x = x + _velocity + bouncing;            }		}				// when mouse button up        private function on_mouse_down(e:MouseEvent):void        {            if (!_mouseDown)            {                // get some initial properties                _mouseDownPoint = new Point(e.stageX, e.stageY);                _lastMouseDownPoint = new Point(e.stageX, e.stageY);                _mouseDown = true;                _mouseDownX = _myScrollElement.x;				// add some more mouse handlers                stage.addEventListener(MouseEvent.MOUSE_UP, on_mouse_up);                stage.addEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);            }        }        // when mouse is moving        private function  on_mouse_move(e:MouseEvent):void        {            if (_mouseDown)            {                // update the element position                var point:Point = new Point(e.stageX, e.stageY);                _myScrollElement.x = _mouseDownX + (point.x - _mouseDownPoint.x);                // update the velocity                _velocity += ((point.x - _lastMouseDownPoint.x) * SPEED_SPRINGNESS);                _lastMouseDownPoint = point;            }        }        // clear everythign when mouse up        private function  on_mouse_up(e:MouseEvent):void        {            if (_mouseDown)            {                _mouseDown = false;                stage.removeEventListener(MouseEvent.MOUSE_UP, on_mouse_up);                stage.removeEventListener(MouseEvent.MOUSE_MOVE, on_mouse_move);            }        }	}}